#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Nov  1 13:03:37 2018

@author: jenniferharber
"""

import numpy as np
import matplotlib.pyplot as plt
import numbers

#----------------------------------------------------------------------------
'>>-------------------------------To-Do-List--------------------------------<<'
"""
change to unit Rg (distance) and Rt (time)
"""
#----------------------------------------------------------------------------
'>>--------------------------------Constants--------------------------------<<'

c     = 2.99792458e8    # Speed of Light [ metres per second ]
G     = 6.67259e-11     # Gravitational Constant  [ MKS units ] 
sigma = 5.6703e-8       # Stefan-Boltzmann Constant [Watt m^-2 K^-4]
k     = 1.38064852e-23  # Boltzman constant
h     = 6.62607004e-34  # Planks Constant
SM    = 1.99e30         # 1 solar mass (kg)
years = 3600*24*365.25  # seconds in a year 
pc    = 3.086e16        # parsecs in metres

#----------------------------------------------------------------------------
'>>--------------------------------Parameters-------------------------------<<'

R_in         = 5.0  # Radius of Central Body, eg. Black Hole, also the start of the disk  (Rg)
M_body = 20 * SM    # Mass of Central Body in solar masses (kg)
R_out        = 25.0 # Radial distance to edge of disk (Rg)
N            = 100  # Number of Annuli , N > 1 at all times 
M0_dot = 0.1 * SM / years # Accretion Rate at outer radii, where mass first flows in (kg/s) 
alpha        = 1.0  # Viscosity Parameter 
H_over_R     = 0.01 # ratio of H to R
scale_factor = 0.1  # m_dot << 1
sample_ratio = 1000 # factor of viscous_timescale to sample (number of intervals per second of timescale)
cycles       = 5    # number of viscous_timescales to span
sinusidal    = False
red_noise    = not(sinusidal)
Q            = 1.0
incidence    = 0    # angle between line of sight and normal to disk plane
D    = 1000 * pc    # Distance of observer from the disk
checks       = True # Check inputs to functions eg R_in >= r >= R_out 

'>>--------------------------------Units------------------------------------<<'

Rg   = (G * M_body) / (c * c)  # Unit of Distance (Arevalo & Uttley)
Rt   = Rg / c                  # Unit of Time (Arevalo & Uttley)

D    = D / Rg                  # put distance to observer into our units

#----------------------------------------------------------------------------
'>>--------------------------------Functions--------------------------------<<'


def accretion_disk (N, R_in, R_out):
    """
    Creates an array of all the annulus (defined by calling accretion disk 
    array so annuli = R)
    Function "accretion_disk" to split the disk into N annuli     
    This function creates an empty disk of multiple annuli to be later filled
    Annuli are geometrically distributed so that r/(r+1) is a constant 

    Inputs: Number of Annuli, inner radius, outer radius
    Output: Array R of the radii of that Annuli
    """
    
    if checks:
        if R_in >= R_out or N < 10:
            print ('ERROR in input to function:accretion_disk')
            
    R = np.empty(N)
    ratio = (R_out / R_in) ** (1.0/(N - 1))
    for i in range(N):
        #R[i] = (((R_out - R_in) / N) * i) + R_in   # linear progression
        R[i] = R_in * (ratio ** i)                  # geometric progression
    return R


def viscous_timescale(r):    
    """
    Function "viscous_timescale" to calculate the viscous velecity at a particular radius 
    Using the formula given in (enter ref)
    Inputs: Radius
    Output: viscous timescale at that radius (in units of Rt)
    """
    
    t_viscous = (2 * np.pi) * r ** (3.0 / 2.0) / ((H_over_R ** 2.0) * alpha)
    return t_viscous  


def phase_shift(annuli,annulus):
    """
    Function "Phase_Shift" to calculate the delta viscous velecity at a given annulus 
    Inputs: Annulus
    Output: Delta Timescale
    """
    
    if checks:
        if annulus > len(annuli) or annulus < 0:
            print ('ERROR in input to function:phase_shift. Annulus must be within the array')
            
    delta_t = viscous_timescale(annuli[annulus+1]) - viscous_timescale(annuli[annulus])
    return int(delta_t * sample_ratio)


def time_division(annuli):
    """
    This calculates the number of time divisions required for each annulus
    sample ratio * viscous timescale for that annulus
    """
    
    time_div = np.empty(len(annuli),dtype=int)
    time_interval = np.empty(len(annuli))
    for annulus in range(len(annuli)):
        r = annuli[annulus]
        time_div[annulus] = int(viscous_timescale(r) * cycles / sample_ratio )
        time_interval[annulus] = viscous_timescale(r) / sample_ratio 
    return time_div, time_interval


def create_variable_array(times):
    """
    This creates a 1D array with the time readings for annulus 0 followed by 1 
    and then 2 and so on. The number of entries is the sum of the time slices
    per annulus
    """
    
    R = np.empty(np.sum(times))
    return R


def radius_to_annulus(r,annuli):    
    """
    returns the annulus in which a certain radius can be found
    """
    
    if checks:
        if r < R_in:
            print ('ERROR in input to function:radius to annulus. radius can not be smaller than R_in')
            return -1  
          
    for annulus in range(len(annuli)):
        if annuli[annulus] == r:
            annulus_smaller = annulus
            return annulus_smaller    
        if annuli[annulus] > r:
            annulus_smaller = annulus-1
            return annulus_smaller
    if checks:
        print ('Warning in function:radius to annulus. radius larger than R_out - set to last annulus')
    return len(annuli)-1

    
def read_variable_array(array,annuli,times,interval,t,r):
    """
    generalised function to deal with treating the 1D array given radius and time 
    inputs - interpolated between the two nearest timestamps
    """
    
    annulus = radius_to_annulus(r,annuli)
    if checks:
        if r > R_out or r < R_in:
            print ('ERROR in input to function:read_variable_array. r out of range')
        if t > times[annulus]:
            print ('ERROR in input to function:read_variable_array. t greater than allowed in annuli')
            
    annulus_start = np.sum(times[0:annulus-1])
    #value = array[int(annulus_start+t)]
    #return value
    time1 = int(t * interval[annulus])
    value1 = array[annulus_start+time1]
    value2 = array[annulus_start+time1]
    value = value1 + ((value2 - value1) * ((t * interval[annulus]) - time1))/ interval[annulus]
    return value        

def update_variable_array(array,annuli,times,interval,t,r,value):    
    """
    generalised function to deal with updating the 1D array given radius and time 
    inputs
    """
    
    annulus = radius_to_annulus(r,annuli)
    if checks:
        if r > R_out or r < R_in:
            print ('ERROR in input to function:update_variable_array. r out of range')    
        if t > times[annulus]:
            print ('ERROR in input to function:update_variable_array. t greater than allowed in annuli')
            
    annulus_start = np.sum(times[0:annulus-1])
    array[annulus_start+t] = value
    return ()
    

def m_dot(annuli,times):
    """
    Function: "m_dot" to calculate variable rate of change of mass in a particular annulus 
        For each annulus calculate the radius and viscous timescalethen 
        for each time division use the timescale as the frequency of a sine wave
        calculate the small periodic changes in each annuli
        
    Inputs: array of annuli,array of annuli,array of time divisions (how many per annulus)
    Output: Array of lowercase m_dot changes
    """
    
    m_dot = create_variable_array(times)
    if sinusidal:
        for annulus in range(len(annuli)):
            # For each annulus calculate the radius and viscous timescale
            # then for each time division use the timescale as the frequency of a sine wave
            r = annuli[annulus]
            timescale = viscous_timescale(r) / (2.0 * np.pi) 
            for t in range(times[annulus]):
                value = scale_factor * np.sin( t / timescale)
                update_variable_array(m_dot,annuli,times,t,r,value)
    if red_noise:
        for annulus in range(len(annuli)):
            # For each annulus calculate the radius and use the power law to 
            # fill in the values for various t.
            r = annuli[annulus]
            values = generate_power_law(times[annulus], 1.0, Q)
            for t in range(times[annulus]):
                update_variable_array(m_dot,annuli,times,t,r,values[t])
    return m_dot


def M_dot(m_dot,annuli,times,interval):
    """
    Function: "M_dot" to calculate the overall rate of change of mass in a particular 
    annulus. For inner annului the rate of flow is determined by the rate from the next
    annuli and the small change m_dot the rate from the outer annuli is time delayed by
    the time it takes the mass to cross that annuli  (t_offset).The code cycles through
    the annuli from the outside (penultimate annulus) to the inside. As the pattern is 
    cyclical I assume that is the time is smaller than the offset we can start the cycle 
    again.
    
    Inputs: m_dot (small changes in annulus), annuli and times)
    Output: Array of Capital M_dot changes
    """
    M_dot = create_variable_array(times)
    #For outer annulus there is no other input than the base rate of flow into
    #the disk (M0_dot)and the small change in that annuli
    r=annuli[len(annuli)-1]
    for t in range(times[len(annuli)-1]):
        value = M0_dot * (1.0 + read_variable_array(m_dot,annuli,times,t,r))
        update_variable_array(M_dot,annuli,times,t,r,value)
        
    #For inner annuli the base rate of flow into
    #the annulus is the M_dot from the next outer annulus (offset by the time it takes to cross the annulus)
   
   
    for annulus in range(len(annuli)-2,-1,-1): #backwards through array
        r=annuli[annulus]
        r1=annuli[annulus+1]
        t_offset_annulus = phase_shift(annuli,annulus)
        #print(annulus,times[annulus],t_offset_annulus)
        
        for t in range(times[annulus]):
            t_offset = t - t_offset_annulus
            if t_offset < 0:
                t_offset = t_offset + int(viscous_timescale(r) * sample_ratio)
              
            value = read_variable_array(M_dot,annuli,times,t_offset,r1) *(1.0 + read_variable_array(m_dot,annuli,times,t,r))
            update_variable_array(M_dot,annuli,times,t,r,value)
    return M_dot


#def viscous_velocity(R): 
#    """
#    Radial Drift Velocity
#    """
#    v_visc = R**(-1.0/2.0) * (H/R_out)**(2.0) * alpha
#    return v_visc
#
#def emissivity_profile(R):
#    """
#    Emissivity Profile for use in radiation of heat and light 
#    """
#    E = R**(-3.0)*(1 - (R_in/R)**(1.0/2.0))
#    return E


def effective_temperature(r,t,M_dot,annuli,times,interval): 
    """
    Effective Temperature at a particular radius and time
    """
    
    M_dot_value = read_variable_array(M_dot,annuli,times,t,r)
    T_eff = (3 * G * M_body * M_dot_value * (1 - ((R_in / r) ** 0.5)) / ((r ** 3) * 8 * np.pi * sigma)) ** 0.25
    return T_eff / (Rg ** 3)


def annulus_effective_temperature(M_dot,annuli,times,interval):
    """
    Effective Temperature, integrated across time for an annulus
    used in determining the blackbody spectrum. repeated for each annulus to 
    give the temperature across the disk
    """
    
    annuli_temperature = np.empty(len(annuli))
    for annulus in range(len(annuli)):
        r=annuli[annulus]
        total_effective_temp = 0
        for time in range(times[annulus]):
            total_effective_temp = total_effective_temp + effective_temperature(r,time,M_dot,annuli,times)
        average_effective_temp = total_effective_temp / times[annulus]
        annuli_temperature[annulus] = average_effective_temp
    return annuli_temperature

    
def flux_at_frequency(annuli,frequency,M_dot,times,temperature):
    """
    Determine the flux for a specified frequency by integrating the BB radiation
    across the disk
    """
    
    total_integral = 0
    dR = (R_out - R_in) / N  
    for annulus in range(len(annuli)):
        r = annuli[annulus]
        T_eff = temperature[annulus]
        interval = dR * r / (np.exp(h*frequency/(k * T_eff)) - 1)
        total_integral = total_integral + interval
    flux = 4 * np.pi * np.cos(incidence) * (frequency ** 3) * total_integral * h / ((c * D) ** 2)
    return flux     
         

def generate_power_law(N, dt, beta, generate_complex=False, random_state=None):
    
    """Generate a power-law light curve

    This uses the method from Timmer & Koenig [1]_

    Parameters
    ----------
    N : integer
        Number of equal-spaced time steps to generate
    dt : float
        Spacing between time-steps
    beta : float
        Power-law index.  The spectrum will be (1 / f)^beta
    generate_complex : boolean (optional)
        if True, generate a complex time series rather than a real time series
    random_state : None, int, or np.random.RandomState instance (optional)
        random seed or random number generator

    Returns
    -------
    x : ndarray
        the length-N

    References
    ----------
    .. [1] Timmer, J. & Koenig, M. On Generating Power Law Noise. A&A 300:707
    """
    
    random_state = check_random_state(random_state)
    dt = float(dt)
    N = int(N)

    Npos = int(N / 2)
    domega = (2 * np.pi / dt / N)

    if generate_complex:
        omega = domega * np.fft.ifftshift(np.arange(N) - int(N / 2))
    else:
        omega = domega * np.arange(Npos + 1)

    x_fft = np.zeros(len(omega), dtype=complex)
    x_fft.real[1:] = random_state.normal(0, 1, len(omega) - 1)
    x_fft.imag[1:] = random_state.normal(0, 1, len(omega) - 1)

    x_fft[1:] *= (1. / omega[1:]) ** (0.5 * beta)
    x_fft[1:] *= (1. / np.sqrt(2))

    # by symmetry, the Nyquist frequency is real if x is real
    if (not generate_complex) and (N % 2 == 0):
        x_fft.imag[-1] = 0

    if generate_complex:
        x = np.fft.ifft(x_fft)
    else:
        x = np.fft.irfft(x_fft, N)

    return x


def generate_damped_RW(t_rest, tau=300., z=2.0,
                       xmean=0, SFinf=0.3, random_state=None):
    """Generate a damped random walk light curve

    This uses a damped random walk model to generate a light curve similar
    to that of a QSO [1]_.

    Parameters
    ----------
    t_rest : array_like
        rest-frame time.  Should be in increasing order
    tau : float
        relaxation time
    z : float
        redshift
    xmean : float (optional)
        mean value of random walk; default=0
    SFinf : float (optional
        Structure function at infinity; default=0.3
    random_state : None, int, or np.random.RandomState instance (optional)
        random seed or random number generator

    Returns
    -------
    x : ndarray
        the sampled values corresponding to times t_rest

    Notes
    -----
    The differential equation is (with t = time/tau):

        dX = -X(t) * dt + sigma * sqrt(tau) * e(t) * sqrt(dt) + b * tau * dt

    where e(t) is white noise with zero mean and unit variance, and

        Xmean = b * tau
        SFinf = sigma * sqrt(tau / 2)

    so

        dX(t) = -X(t) * dt + sqrt(2) * SFint * e(t) * sqrt(dt) + Xmean * dt

    References
    ----------
    .. [1] Kelly, B., Bechtold, J. & Siemiginowska, A. (2009)
           Are the Variations in Quasar Optical Flux Driven by Thermal
           Fluctuations? ApJ 698:895 (2009)
    """
    #  Xmean = b * tau
    #  SFinf = sigma * sqrt(tau / 2)
    t_rest = np.atleast_1d(t_rest)

    if t_rest.ndim != 1:
        raise ValueError('t_rest should be a 1D array')

    random_state = check_random_state(random_state)

    N = len(t_rest)

    t_obs = t_rest * (1. + z) / tau

    x = np.zeros(N)
    x[0] = random_state.normal(xmean, SFinf)
    E = random_state.normal(0, 1, N)

    for i in range(1, N):
        dt = t_obs[i] - t_obs[i - 1]
        x[i] = (x[i - 1]
                - dt * (x[i - 1] - xmean)
                + np.sqrt(2) * SFinf * E[i] * np.sqrt(dt))

    return x

def check_random_state(seed):
    """
    Turn seed into a `numpy.random.RandomState` instance.

    Parameters
    ----------
    seed : `None`, int, or `numpy.random.RandomState`
        If ``seed`` is `None`, return the `~numpy.random.RandomState`
        singleton used by ``numpy.random``.  If ``seed`` is an `int`,
        return a new `~numpy.random.RandomState` instance seeded with
        ``seed``.  If ``seed`` is already a `~numpy.random.RandomState`,
        return it.  Otherwise raise ``ValueError``.

    Returns
    -------
    random_state : `numpy.random.RandomState`
        RandomState object.

    Notes
    -----
    This routine is from scikit-learn.  See
    http://scikit-learn.org/stable/developers/utilities.html#validation-tools.
    """

    if seed is None or seed is np.random:
        return np.random.mtrand._rand
    if isinstance(seed, (numbers.Integral, np.integer)):
        return np.random.RandomState(seed)
    if isinstance(seed, np.random.RandomState):
        return seed

    raise ValueError('{0!r} cannot be used to seed a numpy.random.RandomState'
                     ' instance'.format(seed))



disk_annuli = accretion_disk(N, R_in, R_out)
disk_time_divisions, disk_time_interval = time_division(disk_annuli)
print("Status: disk set up")

plt.plot(disk_annuli, disk_time_divisions)
plt.xlabel("Status: disk radius", fontsize =10)
plt.ylabel("Status: time steps", fontsize =10)
plt.show()

disk_m_dot = m_dot(disk_annuli,disk_time_divisions) 
print("Status: m_dot set up")
disk_M_dot = M_dot(disk_m_dot,disk_annuli,disk_time_divisions,disk_time_interval) 
print("Status: M_dot set up")
disk_temperature = annulus_effective_temperature(disk_M_dot,disk_annuli,disk_time_divisions) 
print("Status: Temperature set up")

#plt.plot(disk_annuli, disk_time_divisions)
#plt.xlabel("disk radius", fontsize =10)
#plt.ylabel("time steps", fontsize =10)
#plt.show()

#----------------------------------------------------------------------------
'>>--------------------------------Plotting-------------------------------<<'



##y0_plot=np.empty(Time)
#annulus=65
#y1_plot=np.empty(disk_time_divisions[annulus])
#x_plot=np.empty(disk_time_divisions[annulus])
##
#for t in range(disk_time_divisions[annulus]):
#    x_plot[t]=t
#    y1_plot[t]=read_variable_array(disk_M_dot,disk_annuli,disk_time_divisions,t,disk_annuli[annulus])
##    y1_plot[i]=M_dot[1][i] 
##    
##    
##plt.figure(figsize = (8,5))
##plt.title("Mass Accretion Rate for annulus 0, 1", fontsize =15)
#plt.xlabel("x", fontsize =10)
#plt.ylabel("y", fontsize =10)
##plt.plot(x_plot,y0_plot,'b',linewidth=1, label ='$Cˆ{12}$')
#plt.plot(x_plot,y1_plot,'r',linewidth=1, label ='$Cˆ{12}$' )

#y0_plot=np.empty(Time)

#annulus=65

#num = N
#y1_plot=np.empty(num)
#x_plot=np.empty(num)
##
#for i in range(num):
#
#    x_plot[i]=i
#    y1_plot[i]=annulus_effective_temperature(i,disk_M_dot,disk_annuli,disk_time_divisions)
##    y1_plot[i]=M_dot[1][i] 
##    
##    
##plt.figure(figsize = (8,5))
##plt.title("Mass Accretion Rate for annulus 0, 1", fontsize =15)
#plt.xlabel("x", fontsize =10)
#plt.ylabel("y", fontsize =10)
##plt.plot(x_plot,y0_plot,'b',linewidth=1, label ='$Cˆ{12}$')
#plt.plot(x_plot,y1_plot,'r',linewidth=1, label ='$Cˆ{12}$' )



num     = 1000
y1_plot = np.empty(num)
x_plot  = np.empty(num)
#
for i in range(num):
    freq = (i)*1e10
 #   x_plot[i]  = np.log(freq)
 #   y1_plot[i] = np.log(flux_at_frequency(disk_annuli, freq, disk_M_dot, disk_time_divisions, disk_temperature))
    x_plot[i]  = (freq)
    y1_plot[i] = (flux_at_frequency(disk_annuli, freq, disk_M_dot, disk_time_divisions, disk_temperature))
#    print('\b\b\b\b\b\b\b', i+1,'/',num, end =" ")

plt.xlabel("x", fontsize =10)
plt.ylabel("y", fontsize =10)
plt.plot(x_plot,y1_plot,'r',linewidth=1, label ='$Cˆ{12}$' )


plt.show()

